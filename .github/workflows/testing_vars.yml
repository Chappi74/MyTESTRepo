name: test
on:
  workflow_dispatch:


jobs:
  test_job:
    runs-on: ubuntu-latest

    env: 
      run_update: 'true'

    steps:

      - name: trace var value
        run: echo " Run update var value ${{ env.run_update }}"

      # Checkout the python tools repo
      # -------------------------------------------      
      - name: checkout python tools repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: 'european-modelling-hubs/hub-tools'
          ref: 'main'
          path: './tools/'

      # Checkout the data repository
      # -------------------------------------------      
      - name: checkout data repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: 'Testing-Forecast-Actions/TEST_2'
          ref: 'master'
          path: './repo/'

      # Run Pyton code
      # -------------------------
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
    
      - run: pip install pycountry isoweek

      - name: change var value
        env: 
          disease_name: "Influenza"
          run_test: ""
          
        run: |          
          # python ./tools/code/check_target_uptodate.py --repository "./repo"
          $run_test=python ./tools/code/check_target_uptodate.py --repository "./repo"
          echo "Job Done" 

      - name: trace var value - after
        run: |
          echo " Run update var value ${{ env.run_update }}"
          echo " Run test var value ${{ env.run_test }}"


      # Checkout the python tools repo
      # used to authenticate and validate the PR
      # -------------------------------------------      
      # - name: format scoring 
      #   id: format_scoring_output
      #   run: |
      #      echo "scoring_file_latest='model-evaluation/latest_forecast_scores.csv'" >> $GITHUB_OUTPUT
      #      echo "scoring_file_snapshot='model-evaluation/snapshots/2024-01-17-forecast_scores.csv'" >> $GITHUB_OUTPUT


      # Save changes to artifact for later persisting 
      # - name: Save changes to artifact
      #   env:
      #     changed_files: ${{ steps.format_scoring_output.outputs.scoring_file_latest }} ${{ steps.format_scoring_output.outputs.scoring_file_snapshot }}
      #   run: |
      #     echo "Changes: \"$changed_files\" " 
          
